-- local M = {}
-- local icons = {}

--- Diagnostic severities.
-- icons.diagnostics = {
--     ERROR = '',
--     WARN = '',
--     HINT = '',
--     INFO = '',
-- }
--
-- function M.git_component()
--     local head = vim.b.gitsigns_head
--     if not head then
--         return ''
--     end
--
--     return string.format(' %s', head)
-- end
--
-- function M.encoding_component()
--     local encoding = vim.opt.fileencoding:get()
--     return encoding ~= '' and string.format('%%#StatuslineModeSeparatorOther# %s', encoding) or ''
-- end
--
-- local last_diagnostic_component = ''
--
-- function M.diagnostics_component()
--     -- Use the last computed value if in insert mode.
--     if vim.startswith(vim.api.nvim_get_mode().mode, 'i') then
--         return last_diagnostic_component
--     end
--
--     local counts = vim.iter(vim.diagnostic.get(0)):fold({
--         ERROR = 0,
--         WARN = 0,
--         HINT = 0,
--         INFO = 0,
--     }, function(acc, diagnostic)
--         local severity = vim.diagnostic.severity[diagnostic.severity]
--         acc[severity] = acc[severity] + 1
--         return acc
--     end)
--
--     local parts = vim.iter.map(function(severity, count)
--         if count == 0 then
--             return nil
--         end
--
--         local hl = 'Diagnostic' .. severity:sub(1, 1) .. severity:sub(2):lower()
--         return string.format('%%#%s#%s %d', hl, icons.diagnostics[severity], count)
--     end, counts)
--
--     return table.concat(parts, ' ')
-- end
--
-- local statusline = {
--     ' %t',
--     '%r ',
--     "%{%v:lua.require'statusline'.git_component()%} ",
--     "%{%v:lua.require'statusline'.diagnostics_component()%} ",
--     '%m ',
--     '%=',
--     "%{%v:lua.require'statusline'.encoding_component()%} | ",
--     '%{&filetype} |',
--     ' %2p%%',
--     ' %3l:%-2c ',
-- }
--
-- vim.o.statusline = table.concat(statusline, '')
--
-- return M
